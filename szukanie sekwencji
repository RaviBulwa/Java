/*

 * To change this license header, choose License Headers in Project Properties.

 * To change this template file, choose Tools | Templates

 * and open the template in the editor.

 */

package values;



import java.util.concurrent.Semaphore;



/**

 *

 * @author Rau7

 */

public class SecondValue {



    private static int A = 0;

    private static int B = 0;

    private static int C = 3;

    

    private static final int SLEEP = 1;

    

    //declare all necessary semaphores 

    private static final Semaphore SEM_1 = new Semaphore(0, true);

    private static final Semaphore SEM_2 = new Semaphore(0, true);

    private static final Semaphore SEM_3 = new Semaphore(0, true);

    private static final Semaphore SEM_4 = new Semaphore(0, true);

    private static final Semaphore SEM_W = new Semaphore(0, true);

    

    public static void main(String[] args) {

        new P2().start();

        new P1().start();

        new P3().start();

        new P4().start();

    }



    private static final class P1 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                A = 10;

                SEM_2.release();

                SEM_1.acquire();

                B = B + 5;



                C = C + A;

                SEM_3.release();

                Thread.sleep(SLEEP);

                System.out.println("Thread P1 is done...");



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P2 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                SEM_2.acquire();

                B = B + C;

                SEM_4.release();

                SEM_3.acquire();

                A = A + B;



                Thread.sleep(SLEEP);



                System.out.println("Thread P2 is done...");



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P3 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                SEM_4.acquire();

                C = B + 10;



                A = 2 * A;



                B = B + A;

                SEM_W.release();



                Thread.sleep(SLEEP);

                System.out.println("Thread P3 is done...");



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P4 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                SEM_W.acquire();

                System.out.println("Sum result: " + A + " + " + B + " + " + C + " = " + (A + B + C));



                Thread.sleep(SLEEP);

                System.out.println("Thread P4 is done...");

                SEM_1.release();



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }





    

}

--------------------------------------------------------------


/*

 * To change this license header, choose License Headers in Project Properties.

 * To change this template file, choose Tools | Templates

 * and open the template in the editor.

 */

package values;



import java.util.concurrent.Semaphore;



/**

 *

 * @author Rau7

 */

public class FirstValue {



    private static int A = 0;

    private static int B = 0;

    private static int C = 3;

    

    private static final int SLEEP = 1;

    

    //declare all necessary semaphores 

private static final Semaphore SEM_1 = new Semaphore(1, true);

private static final Semaphore SEM_2 = new Semaphore(0, true);

private static final Semaphore SEM_3 = new Semaphore(0, true);

private static final Semaphore SEM_4 = new Semaphore(0, true);

private static final Semaphore SEM_W = new Semaphore(0, true);



    public static void main(String[] args) {

        new P2().start();

        new P1().start();

        new P3().start();

        new P4().start();

    }



    private static final class P1 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                SEM_4.acquire();

                A = 10;

                

                B = B + 5;



                C = C + A;

              

                Thread.sleep(SLEEP);

                System.out.println("Thread P1 is done...");





            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P2 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                SEM_1.acquire();

                

                B = B + C;



                A = A + B;



                Thread.sleep(SLEEP);



                System.out.println("Thread P2 is done...");



                 SEM_3.release();

            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P3 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);

                

                SEM_3.acquire();

                C = B + 10;



                A = 2 * A;

                

                SEM_W.release();

                SEM_2.acquire();

                

                B = B + A;

                

                SEM_4.release();

                

                

                



                Thread.sleep(SLEEP);

                System.out.println("Thread P3 is done...");

                SEM_W.release();



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }



    private static final class P4 extends Thread {



        @Override

        public void run() {

            try {

                Thread.sleep(SLEEP);



                SEM_W.acquire();

                System.out.println("Sum result: " + A + " + " + B + " + " + C + " = " + (A + B + C));



                Thread.sleep(SLEEP);

                System.out.println("Thread P4 is done...");

                SEM_2.release();



            } catch (InterruptedException ex) {

                System.out.println("Ooops...");

                Thread.currentThread().interrupt();

                throw new RuntimeException(ex);

            }

        }

    }





    

}



============================= EXTRA


/*

 * To change this license header, choose License Headers in Project Properties.

 * To change this template file, choose Tools | Templates

 * and open the template in the editor.

 */

package producer;



import java.util.concurrent.Semaphore;



/**

 *

 * @author Rau7

 */

public class Producer1 {



    private static final int SLEEP = 1;

    private static final int SLEEP2 = 10;

    private static final int SLEEP3 = 100;

    private static final int COUNT = 20;

    //declare all necessary semaphores 

    private static final Semaphore SEM_Producent = new Semaphore(5, true);

    private static final Semaphore SEM_Pojazdow_Do_Zabrania = new Semaphore(0, true);

    

    private static final Semaphore SEM_Sprzedawca = new Semaphore(3, true);

    private static final Semaphore SEM_Pojazdow_Do_Sprzedania = new Semaphore(0, true);

    

    

 // Producent ma parking o pojemności 5 samochodów, na początku parking jest pusty   

 // Transport może przewozić 1 samochód, na początku jest pusty

 // Sprzedawca ma parking o pojemności 3 samochodów, na początku parking jest pusty   

 // Zsycnhronizować 3 wątki aby prces produkcji transportu i sprzedaży fizycznie mógł być realizowany; 

 //  np. nie można sprzedać auta jeżeli nie zostało ono wyprodukowane i dostarczone   

 // nie można produkować kolejnych aut jeżeli nie ma wolnego miejsca na parkingu   

    

  // The manufacturer has a car park with a capacity of 5 cars, at the beginning the car park is empty

  // The transport can carry 1 car, it is empty at the beginning

  // The seller has a car park with a capacity of 3 cars, at the beginning the car park is empty

  // Synchronize the 3 threads so that the transport and sales and production process can be physically carried out;

  // e.g. a car cannot be sold if it has not been manufactured and delivered

  // no more cars can be produced if there is no free parking space  

    

    

    

    private  static int manufactured_car = 0;

    private  static int car_sold = 0;

    private  static int car_transported = 0;



    public static void main(String[] args) {

        new Produce().start();

        new Transport().start();

        new Sale().start();

    }



    private static final class Produce extends Thread { //thread definition



        @Override

        @SuppressWarnings("SleepWhileInLoop")

        public void run() {

            try {

                for (int i = 0; i < COUNT; i++) {

                    Thread.sleep(SLEEP);

                    //use semaphore

 

                    SEM_Producent.acquire();

                    manufactured_car++;

                    System.out.print(" Produce" + manufactured_car );

                    SEM_Pojazdow_Do_Zabrania.release();

                    //use semaphore

                    



                }

            } catch (InterruptedException ex) {

                System.out.println("Thread PrintA: Ooops..." + ex);

            }

            System.out.println("\n Thread PrintA: I'm done... ");

        }

    }



    private static final class Transport extends Thread {



        @Override

        @SuppressWarnings("SleepWhileInLoop")

        public void run() {

            try {

                for (int i = 0; i < COUNT; i++) {

                    Thread.sleep(SLEEP2);

                    //use semaphore

                    

                    SEM_Pojazdow_Do_Zabrania.acquire();

                    SEM_Sprzedawca.acquire();

                    car_transported++;

                 //   System.out.print(" Transport" +car_transported);

                    System.out.print(" \n Transport" +car_transported  );                    

                    //use semaphore

                    SEM_Pojazdow_Do_Sprzedania.release();

                    SEM_Producent.release();

                    





                }

            } catch (InterruptedException ex) {

                System.out.println("Thread PrintB: Ooops..." + ex);

            }

            System.out.println("\n Thread PrintB: I'm done... ");

        }

    }



    private static final class Sale extends Thread { //thread definition



        @Override

        @SuppressWarnings("SleepWhileInLoop")

        public void run() {

            try {

                for (int i = 0; i < COUNT; i++) {

                    Thread.sleep(SLEEP3);

                    //use semaphore

                     

                    SEM_Pojazdow_Do_Sprzedania.acquire();

                    car_sold++;

                    System.out.print( "\n Sale " + car_sold);

                    //use semaphore

                    SEM_Sprzedawca.release();



                }

            } catch (InterruptedException ex) {

                System.out.println("Thread PrintC: Ooops..." + ex);

            }

            System.out.println("\n Thread PrintC: I'm done... ");

        }

    }



}



#include <iostream>



int main()

{

	int A = 0, B = 0, C = 3;

	A = A + B;

	B = B + C;



	std::cout << A + B + C;

	A = 10;

	B = B + 5;

	C = C + A;






	C = B + 10;

	A = 2 * A;

	B = B + A;







	if (A + B + C == 22 or A + B + C == 56 or A + B + C == 16)

	{

		std::cout << "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";

	}

}


-----------------------


#include <iostream>

#include <algorithm>

#include <vector>

#include <set>

#include <string>





bool czyWektorJestUnikalny(const std::vector<std::vector<int>>& kolekcja, const std::vector<int>& wektor) {

	// Szukamy, czy wektor już istnieje w kolekcji

	return std::find(kolekcja.begin(), kolekcja.end(), wektor) == kolekcja.end();

}



std::vector<int> skrocDoPierwszejOsemki(const std::vector<int>& wektor) {

	std::vector<int> skrocony = wektor;

	auto it = std::find(skrocony.begin(), skrocony.end(), 8);



	// Jeśli znaleziono 8, przycinamy wektor w miejscu jej wystąpienia

	if (it != skrocony.end()) {

		skrocony.erase(it + 1, skrocony.end());

	}

	return skrocony;

}



int instrukcje(int tab[],int r)

{

	int A = 0, B = 0, C = 3;

	for (int i = 0; i<r; i++)

	{

		switch (tab[i])

		{

		case 0:

			A = 10;

			break;

		case 1:

			B = B + 5;

			break;

		case 2:

			C = C + A;

			break;

		case 3:

			B = B + C;

			break;

		case 4:

			A = A + B;

			break;

		case 5:

			C = B + 10;

			break;

		case 6:

			A = 2 * A;

			break;

		case 7:

			B = B + A;

			break;

		case 8:

			return A + B + C;

		case 9:

			break;

		default:

			std::cout << "Cos poszlo nie tak" << std::endl;

		}

	}

	return -1;

}



bool czySpelniaWarunki(const std::vector<int>& tablica) {

	// Warunki:

	// 0 musi być przed 1

	// 1 musi być przed 2

	// 3 musi być przed 4

	// 5 musi być przed 6

	// 6 musi być przed 7

	return (std::find(tablica.begin(), tablica.end(), 0) < std::find(tablica.begin(), tablica.end(), 1)) &&

		(std::find(tablica.begin(), tablica.end(), 1) < std::find(tablica.begin(), tablica.end(), 2)) &&

		(std::find(tablica.begin(), tablica.end(), 3) < std::find(tablica.begin(), tablica.end(), 4)) &&

		(std::find(tablica.begin(), tablica.end(), 5) < std::find(tablica.begin(), tablica.end(), 6)) &&

		(std::find(tablica.begin(), tablica.end(), 6) < std::find(tablica.begin(), tablica.end(), 7));

}





void wszystkie_kombinacje(int suma_ktora_chcesz)

{

	int tab[9]{};

	for (int i = 0; i < 3628800; i++)

	{



		if (suma_ktora_chcesz == instrukcje(tab, 9))

		{

		//	std::cout << "znalazlem!" << wynik << " sekwencja:" << std::endl;

			for (auto x : tab)

				std::cout << x << " ";

			std::cout << std::endl;

		}


	}

}









int main() {

	// Inicjalizujemy wektor wartościami od 0 do 8

	int to_co_chcesz = 16;

	std::vector<int> tablica = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };

	std::vector<std::vector<int>> unikatoweWektory;





	do {

		// Tutaj możemy wykonać sprawdzenie lub operacje na tablicy

		if (czySpelniaWarunki(tablica)) {

			int A = 0, B = 0, C = 3;

			int wynik = 0;

			for (int i = 0; i < 9; i++)

			{

				switch (tablica[i])

				{

				case 0:

					A = 10;

					break;

				case 1:

					B = B + 5;

					break;

				case 2:

					C = C + A;

					break;

				case 3:

					B = B + C;

					break;

				case 4:

					A = A + B;

					break;

				case 5:

					C = B + 10;

					break;

				case 6:

					A = 2 * A;

					break;

				case 7:

					B = B + A;

					break;

				case 8:

					wynik = A + B + C;

					i = 10;

					break;

				case 9:

					break;

				default:

					std::cout << "Cos poszlo nie tak" << std::endl;

				}

			}

			if (wynik == to_co_chcesz)

			{

				if (czyWektorJestUnikalny(unikatoweWektory, skrocDoPierwszejOsemki(tablica))) {

					unikatoweWektory.push_back(skrocDoPierwszejOsemki(tablica));

				}



				//std::cout << "Znalazlem dla " << wynik << " Wyglada tak:" << std::endl;

			//	for (auto x : tablica)

			//	{

				//	std::cout << x << " ";

				//	if (x == 8)

				//		break;

			//	}

			//	std::cout << std::endl;



			}

		}



	} while (std::next_permutation(tablica.begin(), tablica.end()));



	std::cout << "Sekwencje dla " << to_co_chcesz << std::endl;

	for (const auto& wektor : unikatoweWektory) {

		for (int liczba : wektor) {

			std::cout << liczba << " ";

		}

		std::cout << std::endl;

	}



	return 0;

}
